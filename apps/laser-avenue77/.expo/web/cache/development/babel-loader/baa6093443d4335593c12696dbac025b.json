{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Icon from '@expo/vector-icons/FontAwesome';\nimport axios from 'axios';\nimport CommentReplay from \"./CommentReplay\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function Comment(_ref) {\n  var comment = _ref.comment,\n      comments = _ref.comments,\n      setComments = _ref.setComments,\n      taskCreator = _ref.taskCreator,\n      userId = _ref.userId,\n      userName = _ref.userName;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      updateText = _useState2[0],\n      setUpdateText = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      str = _useState4[0],\n      setStr = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showReplay = _useState6[0],\n      setShowReplay = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      replayText = _useState8[0],\n      setReplayText = _useState8[1];\n\n  var _useState9 = useState(1),\n      _useState10 = _slicedToArray(_useState9, 2),\n      replayPage = _useState10[0],\n      setReplayPage = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      replayComments = _useState12[0],\n      setreplayComments = _useState12[1];\n\n  var _useState13 = useState(1),\n      _useState14 = _slicedToArray(_useState13, 2),\n      maxReplayPage = _useState14[0],\n      setMaxReplayPage = _useState14[1];\n\n  useEffect(function () {\n    if (comment) {\n      setStr(comment.comment.comment);\n      setreplayComments(comment.replays.slice(0, (replayPage - 1) * 3 + 3));\n      var n = Math.ceil(comment.replays.length / 3);\n      setMaxReplayPage(n);\n    }\n  }, [comment, comments]);\n  useEffect(function () {\n    setreplayComments(comment.replays.slice(0, (replayPage - 1) * 3 + 3));\n  }, [replayPage]);\n\n  var handleInput = function handleInput(text) {\n    setStr(text);\n  };\n\n  var openDialogDeleteComment = function openDialogDeleteComment() {\n    Alert.alert('Delete this comment', \"Do you want to delete this comment ?\", [{\n      text: 'Cancel',\n      style: 'cancel'\n    }, {\n      text: 'Yes',\n      onPress: deleteComment\n    }]);\n  };\n\n  var deleteComment = function _callee() {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'POST',\n              url: 'https://api.development.agentsoncloud.com/external/public/',\n              headers: {\n                'requsted-service': 'communities',\n                'requsted-path': '/comments/deleteComment/:id',\n                'requsted-method': 'delete'\n              },\n              data: {\n                id: comment.comment.comment_id\n              }\n            }));\n\n          case 3:\n            response = _context.sent;\n\n            if (response.status) {\n              setComments(comments.filter(function (ele) {\n                return comment.comment.comment_id !== ele.comment.comment_id;\n              }));\n            }\n\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log('error');\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  var updateComment = function _callee2() {\n    var response, arr;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'POST',\n              url: 'https://api.development.agentsoncloud.com/external/public/',\n              headers: {\n                'requsted-service': 'communities',\n                'requsted-path': '/comments/updateComment/:id',\n                'requsted-method': 'put'\n              },\n              data: {\n                id: comment.comment.comment_id,\n                newComment: str\n              }\n            }));\n\n          case 3:\n            response = _context2.sent;\n\n            if (response.status) {\n              arr = comments.map(function (ele, i) {\n                if (comment.comment.comment_id === ele.comment.comment_id) {\n                  return _objectSpread(_objectSpread({}, ele), {}, {\n                    comment: _objectSpread(_objectSpread({}, ele.comment), {}, {\n                      comment: str\n                    })\n                  });\n                } else {\n                  return ele;\n                }\n              });\n              setComments(arr);\n              setUpdateText(false);\n            }\n\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log('error');\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  var handleReplayText = function handleReplayText(text) {\n    setReplayText(text);\n  };\n\n  var addReplay = function _callee3() {\n    var response, arr;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'POST',\n              url: 'https://api.development.agentsoncloud.com/external/public/',\n              headers: {\n                'requsted-service': 'communities',\n                'requsted-path': '/comments/addReplay',\n                'requsted-method': 'post'\n              },\n              data: {\n                comment_id: comment.comment.comment_id,\n                user_id: userId,\n                user_name: userName,\n                comment: replayText\n              }\n            }));\n\n          case 3:\n            response = _context3.sent;\n\n            if (response.status) {\n              setReplayText('');\n              arr = comments.map(function (ele) {\n                if (ele.comment.comment_id === comment.comment.comment_id) {\n                  return _objectSpread(_objectSpread({}, ele), {}, {\n                    replays: [].concat(_toConsumableArray(ele.replays), [response.data])\n                  });\n                } else {\n                  return ele;\n                }\n              });\n              setComments(arr);\n            }\n\n            _context3.next = 10;\n            break;\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log('error');\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: style.comment_cont,\n    children: [_jsxs(View, {\n      style: style.comment,\n      children: [_jsx(View, {\n        style: {\n          width: '22%'\n        },\n        children: _jsx(Image, {\n          style: {\n            width: 60,\n            height: 60,\n            borderRadius: 30,\n            marginTop: 5\n          },\n          source: {\n            uri: \"https://randomuser.me/api/portraits/men/10.jpg\"\n          }\n        })\n      }), _jsxs(View, {\n        style: {\n          width: '70%'\n        },\n        children: [_jsxs(View, {\n          style: {\n            flexDirection: 'row'\n          },\n          children: [_jsxs(Text, {\n            style: style.userName,\n            children: [\" \", comment.comment.user_name, \" \"]\n          }), _jsx(View, {\n            style: {\n              flexDirection: 'row'\n            },\n            children: userId === comment.comment.user_id ? _jsxs(_Fragment, {\n              children: [_jsx(Icon, {\n                name: \"pencil\",\n                style: {\n                  marginRight: 15\n                },\n                size: 18,\n                color: \"#009688\",\n                onPress: function onPress() {\n                  setUpdateText(!updateText);\n                }\n              }), _jsx(Icon, {\n                name: \"close\",\n                size: 18,\n                style: {\n                  color: 'red'\n                },\n                onPress: openDialogDeleteComment\n              })]\n            }) : null\n          })]\n        }), !updateText ? _jsxs(Text, {\n          style: style.text,\n          children: [\" \", comment.comment.comment, \" \"]\n        }) : _jsxs(View, {\n          style: {\n            flexDirection: 'row',\n            alignItems: 'center'\n          },\n          children: [_jsx(View, {\n            style: {\n              width: '70%'\n            },\n            children: _jsx(TextInput, {\n              onChangeText: handleInput,\n              value: str,\n              placeholder: \"new comment\"\n            })\n          }), _jsx(Icon, {\n            name: \"check\",\n            size: 20,\n            style: {\n              color: 'blue'\n            },\n            onPress: updateComment\n          })]\n        })]\n      })]\n    }), comment.replays.length ? _jsx(View, {\n      style: {\n        alignItems: 'flex-end'\n      },\n      children: _jsx(View, {\n        style: {\n          width: '70%'\n        },\n        children: _jsx(Text, {\n          style: {\n            color: 'blue',\n            textTransform: 'capitalize'\n          },\n          onPress: function onPress() {\n            setShowReplay(!showReplay);\n          },\n          children: showReplay ? 'hide replays' : 'show replays'\n        })\n      })\n    }) : null, showReplay ? _jsxs(View, {\n      style: {\n        alignItems: 'center'\n      },\n      children: [_jsx(View, {\n        style: {\n          width: '75%',\n          margin: 10,\n          minHeight: 280\n        },\n        children: _jsx(FlatList, {\n          data: replayComments,\n          renderItem: function renderItem(_ref2) {\n            var item = _ref2.item,\n                index = _ref2.index;\n            return _jsx(CommentReplay, {\n              replay: item,\n              comments: comments,\n              setComments: setComments,\n              taskCreator: taskCreator,\n              userId: userId\n            });\n          },\n          keyExtractor: function keyExtractor(item) {\n            return item.replay_id;\n          }\n        })\n      }), _jsx(View, {\n        style: {\n          flexDirection: 'row',\n          justifyContent: 'center'\n        },\n        children: replayPage !== maxReplayPage ? _jsx(Text, {\n          style: {\n            margin: 10\n          },\n          onPress: function onPress() {\n            setReplayPage(replayPage + 1);\n          },\n          children: \"Show more\"\n        }) : null\n      })]\n    }) : null, _jsx(View, {\n      style: {\n        alignItems: 'center'\n      },\n      children: _jsxs(View, {\n        style: {\n          width: '85%',\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        children: [_jsx(View, {\n          children: _jsx(TextInput, {\n            onChangeText: handleReplayText,\n            value: replayText,\n            placeholder: \"Enter your replay here\"\n          })\n        }), _jsx(Icon, {\n          name: \"plus\",\n          size: 22,\n          onPress: addReplay\n        })]\n      })\n    })]\n  });\n}\nvar style = StyleSheet.create({\n  comment_cont: {\n    backgroundColor: 'white',\n    minHeight: 90,\n    paddingTop: 10,\n    paddingBottom: 10,\n    borderBottomWidth: 2,\n    borderColor: '#eee'\n  },\n  comment: {\n    backgroundColor: 'white',\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  userName: {\n    width: '80%',\n    fontSize: 16,\n    color: 'black'\n  },\n  text: {\n    marginTop: 10,\n    color: 'black',\n    fontSize: 13\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","Icon","axios","CommentReplay","Comment","comment","comments","setComments","taskCreator","userId","userName","updateText","setUpdateText","str","setStr","showReplay","setShowReplay","replayText","setReplayText","replayPage","setReplayPage","replayComments","setreplayComments","maxReplayPage","setMaxReplayPage","replays","slice","n","Math","ceil","length","handleInput","text","openDialogDeleteComment","Alert","alert","style","onPress","deleteComment","method","url","headers","data","id","comment_id","response","status","filter","ele","console","log","updateComment","newComment","arr","map","i","handleReplayText","addReplay","user_id","user_name","comment_cont","width","height","borderRadius","marginTop","uri","flexDirection","marginRight","color","alignItems","textTransform","margin","minHeight","item","index","replay_id","justifyContent","StyleSheet","create","backgroundColor","paddingTop","paddingBottom","borderBottomWidth","borderColor","fontSize"],"sources":["C:/Users/User/AgentsNx/Mobile-Expo/agents/apps/laser-avenue77/src/Tasks/Screens/Comment.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  ScrollView,\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  Image,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  Alert,\r\n  Modal,\r\n  FlatList,\r\n} from 'react-native';\r\nimport Icon from '@expo/vector-icons/FontAwesome';\r\nimport axios from 'axios';\r\nimport CommentReplay from './CommentReplay';\r\n\r\nexport default function Comment({\r\n  comment,\r\n  comments,\r\n  setComments,\r\n  taskCreator,\r\n  userId,\r\n  userName,\r\n}) {\r\n  const [updateText, setUpdateText] = useState(false);\r\n  const [str, setStr] = useState('');\r\n  const [showReplay, setShowReplay] = useState(false);\r\n  const [replayText, setReplayText] = useState('');\r\n  const [replayPage, setReplayPage] = useState(1);\r\n  const [replayComments, setreplayComments] = useState([]);\r\n  const [maxReplayPage, setMaxReplayPage] = useState(1);\r\n\r\n  useEffect(() => {\r\n    if (comment) {\r\n      setStr(comment.comment.comment);\r\n      setreplayComments(comment.replays.slice(0, (replayPage - 1) * 3 + 3));\r\n      const n = Math.ceil(comment.replays.length / 3);\r\n      setMaxReplayPage(n);\r\n    }\r\n  }, [comment, comments]);\r\n\r\n  useEffect(() => {\r\n    setreplayComments(comment.replays.slice(0, (replayPage - 1) * 3 + 3));\r\n  }, [replayPage]);\r\n\r\n  const handleInput = (text) => {\r\n    setStr(text);\r\n  };\r\n\r\n  /* -------------------------- delete comment ----------------------------------- */\r\n\r\n  const openDialogDeleteComment = () => {\r\n    Alert.alert('Delete this comment', `Do you want to delete this comment ?`, [\r\n      {\r\n        text: 'Cancel',\r\n        style: 'cancel',\r\n      },\r\n      { text: 'Yes', onPress: deleteComment },\r\n    ]);\r\n  };\r\n\r\n  const deleteComment = async () => {\r\n    try {\r\n      // const response = await axios.delete(\r\n      //   `http://10.0.2.2:30122/comments/deleteComment/${comment.comment.comment_id}`\r\n      // );\r\n      const response = await axios({\r\n        method: 'POST',\r\n        url: 'https://api.development.agentsoncloud.com/external/public/',\r\n        headers: {\r\n          'requsted-service': 'communities',\r\n          'requsted-path': '/comments/deleteComment/:id',\r\n          'requsted-method': 'delete',\r\n        },\r\n        data: {\r\n          id: comment.comment.comment_id,\r\n        },\r\n      });\r\n      if (response.status) {\r\n        setComments(\r\n          comments.filter((ele) => {\r\n            return comment.comment.comment_id !== ele.comment.comment_id;\r\n          })\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log('error');\r\n    }\r\n  };\r\n\r\n  /* ---------------------------- update comment -------------------------------------------- */\r\n\r\n  const updateComment = async () => {\r\n    try {\r\n      // const response = await axios.put(\r\n      //   `http://10.0.2.2:30122/comments/updateComment/${comment.comment.comment_id}`,\r\n      //   {\r\n      //     newComment: str,\r\n      //   }\r\n      // );\r\n      const response = await axios({\r\n        method: 'POST',\r\n        url: 'https://api.development.agentsoncloud.com/external/public/',\r\n        headers: {\r\n          'requsted-service': 'communities',\r\n          'requsted-path': '/comments/updateComment/:id',\r\n          'requsted-method': 'put',\r\n        },\r\n        data: {\r\n          id: comment.comment.comment_id,\r\n          newComment: str,\r\n        },\r\n      });\r\n      if (response.status) {\r\n        const arr = comments.map((ele, i) => {\r\n          if (comment.comment.comment_id === ele.comment.comment_id) {\r\n            return { ...ele, comment: { ...ele.comment, comment: str } };\r\n          } else {\r\n            return ele;\r\n          }\r\n        });\r\n        setComments(arr);\r\n        setUpdateText(false);\r\n      }\r\n    } catch (error) {\r\n      console.log('error');\r\n    }\r\n  };\r\n\r\n  /* ---------------------------- add replay -------------------------------------------- */\r\n\r\n  const handleReplayText = (text) => {\r\n    setReplayText(text);\r\n  };\r\n\r\n  const addReplay = async () => {\r\n    try {\r\n      // const response = await axios.post(\r\n      //   `http://10.0.2.2:30122/comments/addReplay`,\r\n      //   {\r\n      //     comment_id: comment.comment.comment_id,\r\n      //     user_id: userId,\r\n      //     user_name: userName,\r\n      //     comment: replayText,\r\n      //   },\r\n      // );\r\n      const response = await axios({\r\n        method: 'POST',\r\n        url: 'https://api.development.agentsoncloud.com/external/public/',\r\n        headers: {\r\n          'requsted-service': 'communities',\r\n          'requsted-path': '/comments/addReplay',\r\n          'requsted-method': 'post',\r\n        },\r\n        data: {\r\n          comment_id: comment.comment.comment_id,\r\n          user_id: userId,\r\n          user_name: userName,\r\n          comment: replayText,\r\n        },\r\n      });\r\n      if (response.status) {\r\n        setReplayText('');\r\n        const arr = comments.map((ele) => {\r\n          if (ele.comment.comment_id === comment.comment.comment_id) {\r\n            return { ...ele, replays: [...ele.replays, response.data] };\r\n          } else {\r\n            return ele;\r\n          }\r\n        });\r\n        setComments(arr);\r\n      }\r\n    } catch (error) {\r\n      console.log('error');\r\n    }\r\n  };\r\n\r\n  /* ------------------------------------------------------------------------ */\r\n\r\n  return (\r\n    <View style={style.comment_cont}>\r\n      <View style={style.comment}>\r\n        <View\r\n          style={{\r\n            width: '22%',\r\n          }}\r\n        >\r\n          <Image\r\n            style={{ width: 60, height: 60, borderRadius: 30, marginTop: 5 }}\r\n            source={{\r\n              uri: `https://randomuser.me/api/portraits/men/10.jpg`,\r\n            }}\r\n          />\r\n        </View>\r\n        <View style={{ width: '70%' }}>\r\n          <View style={{ flexDirection: 'row' }}>\r\n            <Text style={style.userName}> {comment.comment.user_name} </Text>\r\n            <View style={{ flexDirection: 'row' }}>\r\n              {userId === comment.comment.user_id ? (\r\n                <>\r\n                  <Icon\r\n                    name=\"pencil\"\r\n                    style={{ marginRight: 15 }}\r\n                    size={18}\r\n                    color=\"#009688\"\r\n                    onPress={() => {\r\n                      setUpdateText(!updateText);\r\n                    }}\r\n                  />\r\n                  <Icon\r\n                    name=\"close\"\r\n                    size={18}\r\n                    style={{ color: 'red' }}\r\n                    onPress={openDialogDeleteComment}\r\n                  />\r\n                </>\r\n              ) : null}\r\n            </View>\r\n          </View>\r\n          {!updateText ? (\r\n            <Text style={style.text}> {comment.comment.comment} </Text>\r\n          ) : (\r\n            <View style={{ flexDirection: 'row', alignItems: 'center' }}>\r\n              <View style={{ width: '70%' }}>\r\n                <TextInput\r\n                  onChangeText={handleInput}\r\n                  value={str}\r\n                  placeholder=\"new comment\"\r\n                />\r\n              </View>\r\n              <Icon\r\n                name=\"check\"\r\n                size={20}\r\n                style={{ color: 'blue' }}\r\n                onPress={updateComment}\r\n              />\r\n            </View>\r\n          )}\r\n        </View>\r\n      </View>\r\n      {comment.replays.length ? (\r\n        <View style={{ alignItems: 'flex-end' }}>\r\n          <View style={{ width: '70%' }}>\r\n            <Text\r\n              style={{ color: 'blue', textTransform: 'capitalize' }}\r\n              onPress={() => {\r\n                setShowReplay(!showReplay);\r\n              }}\r\n            >\r\n              {showReplay ? 'hide replays' : 'show replays'}\r\n            </Text>\r\n          </View>\r\n        </View>\r\n      ) : null}\r\n      {showReplay ? (\r\n        <View style={{ alignItems: 'center' }}>\r\n          <View style={{ width: '75%', margin: 10, minHeight: 280 }}>\r\n            <FlatList\r\n              data={replayComments}\r\n              renderItem={({ item, index }) => {\r\n                return (\r\n                  <CommentReplay\r\n                    replay={item}\r\n                    comments={comments}\r\n                    setComments={setComments}\r\n                    taskCreator={taskCreator}\r\n                    userId={userId}\r\n                  />\r\n                );\r\n              }}\r\n              keyExtractor={(item) => item.replay_id}\r\n            />\r\n          </View>\r\n          <View style={{ flexDirection: 'row', justifyContent: 'center' }}>\r\n            {/* {replayPage !== 1 ? (\r\n              <Text\r\n                style={{margin: 10}}\r\n                onPress={() => {\r\n                  setReplayPage(replayPage + -1);\r\n                }}>\r\n                back\r\n              </Text>\r\n            ) : null} */}\r\n            {/* <Text style={{margin: 10}}> {replayPage} </Text> */}\r\n            {replayPage !== maxReplayPage ? (\r\n              <Text\r\n                style={{ margin: 10 }}\r\n                onPress={() => {\r\n                  setReplayPage(replayPage + 1);\r\n                }}\r\n              >\r\n                Show more\r\n              </Text>\r\n            ) : null}\r\n          </View>\r\n        </View>\r\n      ) : null}\r\n      <View style={{ alignItems: 'center' }}>\r\n        <View\r\n          style={{\r\n            width: '85%',\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <View>\r\n            <TextInput\r\n              onChangeText={handleReplayText}\r\n              value={replayText}\r\n              placeholder=\"Enter your replay here\"\r\n            />\r\n          </View>\r\n          <Icon name=\"plus\" size={22} onPress={addReplay} />\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst style = StyleSheet.create({\r\n  comment_cont: {\r\n    backgroundColor: 'white',\r\n    // alignItems: 'center',\r\n    minHeight: 90,\r\n    paddingTop: 10,\r\n    paddingBottom: 10,\r\n    borderBottomWidth: 2,\r\n    borderColor: '#eee',\r\n  },\r\n  comment: {\r\n    backgroundColor: 'white',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n  },\r\n  userName: {\r\n    width: '80%',\r\n    fontSize: 16,\r\n    color: 'black',\r\n  },\r\n  text: {\r\n    marginTop: 10,\r\n    color: 'black',\r\n    fontSize: 13,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}